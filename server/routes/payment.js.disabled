import express from 'express';
import Razorpay from 'razorpay';
import dotenv from 'dotenv';
import crypto from 'crypto';
import { verifyToken } from './auth.js';

dotenv.config();

const router = express.Router();
// Initialize Razorpay only if API key is provided
let razorpay = null;
try {
  if (process.env.RAZORPAY_KEY_ID && process.env.RAZORPAY_KEY_SECRET && 
      process.env.RAZORPAY_KEY_ID !== 'rzp_test_your_key_id_here') {
    razorpay = new Razorpay({
      key_id: process.env.RAZORPAY_KEY_ID,
      key_secret: process.env.RAZORPAY_KEY_SECRET,
    });
    console.log('Razorpay initialized successfully');
  } else {
    console.warn('Razorpay API keys not found or using placeholder values. Payment functionality will be disabled.');
  }
} catch (error) {
  console.error('Error initializing Razorpay:', error.message);
  console.warn('Payment functionality will be disabled.');
}

// Create Razorpay order
router.post('/create-order', verifyToken, async (req, res) => {
  try {
    if (!razorpay) {
      return res.status(503).json({ error: 'Payment service not available. Please configure Razorpay.' });
    }

    const { courseId, amount } = req.body;
    const userId = req.user.userId;

    if (!courseId || !amount) {
      return res.status(400).json({ error: 'Course ID and amount are required' });
    }

    const order = await razorpay.orders.create({
      amount: amount * 100, // Convert to paise (smallest currency unit)
      currency: 'INR',
      notes: {
        courseId,
        userId: userId.toString(),
      },
    });

    res.json({
      orderId: order.id,
      amount: order.amount,
      currency: order.currency,
      keyId: process.env.RAZORPAY_KEY_ID
    });
  } catch (error) {
    console.error('Razorpay order creation error:', error);
    res.status(500).json({ error: error.message });
  }
});

// Verify Razorpay payment
router.post('/verify-payment', verifyToken, async (req, res) => {
  try {
    if (!razorpay) {
      return res.status(503).json({ error: 'Payment service not available' });
    }

    const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;

    if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {
      return res.status(400).json({ error: 'Missing payment verification data' });
    }

    // Verify signature
    const body = razorpay_order_id + '|' + razorpay_payment_id;
    const expectedSignature = crypto
      .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)
      .update(body.toString())
      .digest('hex');

    if (expectedSignature !== razorpay_signature) {
      return res.status(400).json({ error: 'Invalid payment signature' });
    }

    // Payment verified successfully
    console.log('Payment verified successfully:', {
      orderId: razorpay_order_id,
      paymentId: razorpay_payment_id
    });

    res.json({ 
      success: true, 
      message: 'Payment verified successfully',
      paymentId: razorpay_payment_id
    });
  } catch (error) {
    console.error('Payment verification error:', error);
    res.status(500).json({ error: error.message });
  }
});

export default router; 